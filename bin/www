#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('perabeats:server');
var http = require('http');

var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

GLOBAL.io = require('socket.io')(server);
GLOBAL.control_clients = require('../model/control_clients.js');


var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/perabeats');
var Game = require('../model/game_model.js');


io.on('connection', function(socket){
  console.log('a user connected ' + socket.id);

  socket.emit('new_control', socket.id);
  socket.emit('live_update', control_clients.getAllLiveClients());

  var obj = JSON.parse(fs.readFileSync('model/highScores.js', 'utf8'));

  socket.emit('score_list', obj);
  // sendList
  Game.find({}).sort({date: -1}).exec(function(err, games) {
    if (err) throw err;
    // object of all the games
    console.log(games);
    socket.emit('init_list', games);
  });

  socket.on('new_control', function(socket_id){
    console.log("new_control client: " + socket_id);
    control_clients.createClient(socket_id);
  })

  socket.on('disconnect', function(){
    console.log(socket.id);
    control_clients.removeClient(socket.id);
    console.log('removed' + socket.id)
  })



});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
